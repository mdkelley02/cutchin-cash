// @generated by protobuf-ts 2.8.3
// @generated from protobuf file "common.proto" (package "cutchin_cash.common", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message cutchin_cash.common.User
 */
export interface User {
    /**
     * @generated from protobuf field: string userId = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string displayName = 2;
     */
    displayName: string;
    /**
     * @generated from protobuf field: string fullName = 3;
     */
    fullName: string;
    /**
     * @generated from protobuf field: string email = 4;
     */
    email: string;
    /**
     * @generated from protobuf field: cutchin_cash.common.Money balance = 5;
     */
    balance?: Money;
}
/**
 * @generated from protobuf message cutchin_cash.common.PrivateUser
 */
export interface PrivateUser {
    /**
     * @generated from protobuf field: string userId = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string displayName = 2;
     */
    displayName: string;
    /**
     * @generated from protobuf field: string fullName = 3;
     */
    fullName: string;
}
/**
 * @generated from protobuf message cutchin_cash.common.Money
 */
export interface Money {
    /**
     * @generated from protobuf field: sint32 whole = 1;
     */
    whole: number;
    /**
     * @generated from protobuf field: int32 fraction = 2;
     */
    fraction: number;
}
/**
 * @generated from protobuf message cutchin_cash.common.Transaction
 */
export interface Transaction {
    /**
     * @generated from protobuf field: string transactionId = 1;
     */
    transactionId: string;
    /**
     * @generated from protobuf field: string receivingUserId = 2;
     */
    receivingUserId: string;
    /**
     * @generated from protobuf field: string payingUserId = 3;
     */
    payingUserId: string;
    /**
     * @generated from protobuf field: string description = 4;
     */
    description: string;
    /**
     * @generated from protobuf field: cutchin_cash.common.Money amount = 5;
     */
    amount?: Money;
    /**
     * @generated from protobuf field: string timestamp = 6;
     */
    timestamp: string;
    /**
     * @generated from protobuf field: cutchin_cash.common.TransactionStatus status = 7;
     */
    status: TransactionStatus;
}
/**
 * @generated from protobuf message cutchin_cash.common.Empty
 */
export interface Empty {
}
/**
 * @generated from protobuf message cutchin_cash.common.Token
 */
export interface Token {
    /**
     * @generated from protobuf field: string token = 1;
     */
    token: string;
}
/**
 * @generated from protobuf enum cutchin_cash.common.TransactionStatus
 */
export enum TransactionStatus {
    /**
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: PENDING = 1;
     */
    PENDING = 1,
    /**
     * @generated from protobuf enum value: ACCEPTED = 2;
     */
    ACCEPTED = 2,
    /**
     * @generated from protobuf enum value: REJECTED = 3;
     */
    REJECTED = 3
}
/**
 * @generated from protobuf enum cutchin_cash.common.ErrorType
 */
export enum ErrorType {
    /**
     * @generated from protobuf enum value: INVALID_CREDENTIALS = 0;
     */
    INVALID_CREDENTIALS = 0,
    /**
     * @generated from protobuf enum value: PAYING_USER_NOT_FOUND = 1;
     */
    PAYING_USER_NOT_FOUND = 1,
    /**
     * @generated from protobuf enum value: RECEIVING_USER_NOT_FOUND = 2;
     */
    RECEIVING_USER_NOT_FOUND = 2,
    /**
     * @generated from protobuf enum value: CANNOT_SEND_TO_SELF = 3;
     */
    CANNOT_SEND_TO_SELF = 3,
    /**
     * @generated from protobuf enum value: TRANSACTION_NOT_FOUND = 4;
     */
    TRANSACTION_NOT_FOUND = 4,
    /**
     * @generated from protobuf enum value: TRANSACTION_ALREADY_DECISIONED = 5;
     */
    TRANSACTION_ALREADY_DECISIONED = 5,
    /**
     * @generated from protobuf enum value: INSUFFICIENT_BALANCE = 6;
     */
    INSUFFICIENT_BALANCE = 6,
    /**
     * @generated from protobuf enum value: INVALID_AMOUNT = 7;
     */
    INVALID_AMOUNT = 7
}
// @generated message type with reflection information, may provide speed optimized methods
class User$Type extends MessageType<User> {
    constructor() {
        super("cutchin_cash.common.User", [
            { no: 1, name: "userId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "displayName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "fullName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "balance", kind: "message", T: () => Money }
        ]);
    }
    create(value?: PartialMessage<User>): User {
        const message = { userId: "", displayName: "", fullName: "", email: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<User>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User): User {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string userId */ 1:
                    message.userId = reader.string();
                    break;
                case /* string displayName */ 2:
                    message.displayName = reader.string();
                    break;
                case /* string fullName */ 3:
                    message.fullName = reader.string();
                    break;
                case /* string email */ 4:
                    message.email = reader.string();
                    break;
                case /* cutchin_cash.common.Money balance */ 5:
                    message.balance = Money.internalBinaryRead(reader, reader.uint32(), options, message.balance);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string userId = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string displayName = 2; */
        if (message.displayName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.displayName);
        /* string fullName = 3; */
        if (message.fullName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.fullName);
        /* string email = 4; */
        if (message.email !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.email);
        /* cutchin_cash.common.Money balance = 5; */
        if (message.balance)
            Money.internalBinaryWrite(message.balance, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cutchin_cash.common.User
 */
export const User = new User$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PrivateUser$Type extends MessageType<PrivateUser> {
    constructor() {
        super("cutchin_cash.common.PrivateUser", [
            { no: 1, name: "userId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "displayName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "fullName", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PrivateUser>): PrivateUser {
        const message = { userId: "", displayName: "", fullName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PrivateUser>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PrivateUser): PrivateUser {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string userId */ 1:
                    message.userId = reader.string();
                    break;
                case /* string displayName */ 2:
                    message.displayName = reader.string();
                    break;
                case /* string fullName */ 3:
                    message.fullName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PrivateUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string userId = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string displayName = 2; */
        if (message.displayName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.displayName);
        /* string fullName = 3; */
        if (message.fullName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.fullName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cutchin_cash.common.PrivateUser
 */
export const PrivateUser = new PrivateUser$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Money$Type extends MessageType<Money> {
    constructor() {
        super("cutchin_cash.common.Money", [
            { no: 1, name: "whole", kind: "scalar", T: 17 /*ScalarType.SINT32*/ },
            { no: 2, name: "fraction", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Money>): Money {
        const message = { whole: 0, fraction: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Money>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Money): Money {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* sint32 whole */ 1:
                    message.whole = reader.sint32();
                    break;
                case /* int32 fraction */ 2:
                    message.fraction = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Money, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* sint32 whole = 1; */
        if (message.whole !== 0)
            writer.tag(1, WireType.Varint).sint32(message.whole);
        /* int32 fraction = 2; */
        if (message.fraction !== 0)
            writer.tag(2, WireType.Varint).int32(message.fraction);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cutchin_cash.common.Money
 */
export const Money = new Money$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Transaction$Type extends MessageType<Transaction> {
    constructor() {
        super("cutchin_cash.common.Transaction", [
            { no: 1, name: "transactionId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "receivingUserId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "payingUserId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "amount", kind: "message", T: () => Money },
            { no: 6, name: "timestamp", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "status", kind: "enum", T: () => ["cutchin_cash.common.TransactionStatus", TransactionStatus] }
        ]);
    }
    create(value?: PartialMessage<Transaction>): Transaction {
        const message = { transactionId: "", receivingUserId: "", payingUserId: "", description: "", timestamp: "", status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Transaction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Transaction): Transaction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string transactionId */ 1:
                    message.transactionId = reader.string();
                    break;
                case /* string receivingUserId */ 2:
                    message.receivingUserId = reader.string();
                    break;
                case /* string payingUserId */ 3:
                    message.payingUserId = reader.string();
                    break;
                case /* string description */ 4:
                    message.description = reader.string();
                    break;
                case /* cutchin_cash.common.Money amount */ 5:
                    message.amount = Money.internalBinaryRead(reader, reader.uint32(), options, message.amount);
                    break;
                case /* string timestamp */ 6:
                    message.timestamp = reader.string();
                    break;
                case /* cutchin_cash.common.TransactionStatus status */ 7:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Transaction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string transactionId = 1; */
        if (message.transactionId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.transactionId);
        /* string receivingUserId = 2; */
        if (message.receivingUserId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.receivingUserId);
        /* string payingUserId = 3; */
        if (message.payingUserId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.payingUserId);
        /* string description = 4; */
        if (message.description !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.description);
        /* cutchin_cash.common.Money amount = 5; */
        if (message.amount)
            Money.internalBinaryWrite(message.amount, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string timestamp = 6; */
        if (message.timestamp !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.timestamp);
        /* cutchin_cash.common.TransactionStatus status = 7; */
        if (message.status !== 0)
            writer.tag(7, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cutchin_cash.common.Transaction
 */
export const Transaction = new Transaction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Empty$Type extends MessageType<Empty> {
    constructor() {
        super("cutchin_cash.common.Empty", []);
    }
    create(value?: PartialMessage<Empty>): Empty {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Empty>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Empty): Empty {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Empty, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cutchin_cash.common.Empty
 */
export const Empty = new Empty$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Token$Type extends MessageType<Token> {
    constructor() {
        super("cutchin_cash.common.Token", [
            { no: 1, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Token>): Token {
        const message = { token: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Token>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Token): Token {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string token */ 1:
                    message.token = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Token, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string token = 1; */
        if (message.token !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cutchin_cash.common.Token
 */
export const Token = new Token$Type();
