// @generated by protobuf-ts 2.8.3
// @generated from protobuf file "auth.proto" (package "cutchin_cash.auth", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { AuthService } from "./auth";
import type { RegisterResponse } from "./auth";
import type { RegisterRequest } from "./auth";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Token } from "./common";
import type { LoginRequest } from "./auth";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service cutchin_cash.auth.AuthService
 */
export interface IAuthServiceClient {
    /**
     * @generated from protobuf rpc: Login(cutchin_cash.auth.LoginRequest) returns (cutchin_cash.common.Token);
     */
    login(input: LoginRequest, options?: RpcOptions): UnaryCall<LoginRequest, Token>;
    /**
     * @generated from protobuf rpc: Register(cutchin_cash.auth.RegisterRequest) returns (cutchin_cash.auth.RegisterResponse);
     */
    register(input: RegisterRequest, options?: RpcOptions): UnaryCall<RegisterRequest, RegisterResponse>;
    /**
     * @generated from protobuf rpc: Refresh(cutchin_cash.common.Token) returns (cutchin_cash.common.Token);
     */
    refresh(input: Token, options?: RpcOptions): UnaryCall<Token, Token>;
}
/**
 * @generated from protobuf service cutchin_cash.auth.AuthService
 */
export class AuthServiceClient implements IAuthServiceClient, ServiceInfo {
    typeName = AuthService.typeName;
    methods = AuthService.methods;
    options = AuthService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Login(cutchin_cash.auth.LoginRequest) returns (cutchin_cash.common.Token);
     */
    login(input: LoginRequest, options?: RpcOptions): UnaryCall<LoginRequest, Token> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<LoginRequest, Token>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Register(cutchin_cash.auth.RegisterRequest) returns (cutchin_cash.auth.RegisterResponse);
     */
    register(input: RegisterRequest, options?: RpcOptions): UnaryCall<RegisterRequest, RegisterResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<RegisterRequest, RegisterResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Refresh(cutchin_cash.common.Token) returns (cutchin_cash.common.Token);
     */
    refresh(input: Token, options?: RpcOptions): UnaryCall<Token, Token> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<Token, Token>("unary", this._transport, method, opt, input);
    }
}
