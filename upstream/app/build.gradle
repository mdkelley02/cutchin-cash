plugins {
    id 'java'
    id 'application'
    id 'com.google.protobuf' version '0.9.2'
}

repositories {
    mavenCentral()
}

dependencies {
    // Direct dependencies
    implementation 'com.google.protobuf:protobuf-java:3.21.12'
    runtimeOnly 'com.google.protobuf:protobuf-java-util:3.21.12'
    implementation 'io.grpc:grpc-netty-shaded:1.53.0'
    implementation "io.grpc:grpc-protobuf:1.40.1"
    implementation 'io.grpc:grpc-stub:1.40.1'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'io.grpc:grpc-services:1.53.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.17.1'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.17.1'
    implementation 'redis.clients:jedis:3.7.0'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'com.auth0:java-jwt:4.4.0'

    // Test dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testImplementation 'org.mockito:mockito-core:4.0.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

protobuf {
    protoc {
        // You still need protoc like in the non-Android case
        artifact = 'com.google.protobuf:protoc:3.19.0'
    }

    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.53.0'
        }
    }

    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

test {
    useJUnitPlatform()
}

application {
    // Define the main class for the application.
    mainClass = 'cutchin_cash.App'
}

task redisVolume(type: Exec) {
    commandLine 'docker', 'volume', 'create', 'cutchin-cash-redis-data'
}

task runRedis(type: Exec) {
    dependsOn redisVolume
    commandLine 'docker', 'run', '-p', '6379:6379',  '-v', 'cutchin-cash-redis-data:/data', '-i', 'redis/redis-stack:latest'
}

task runCertGen(type: Exec) {
    commandLine 'src/main/resources/./cert_gen.sh'
}
